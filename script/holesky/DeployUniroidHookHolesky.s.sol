// SPDX-License-Identifier: MIT
pragma solidity 0.8.26;

import {Script} from "forge-std/Script.sol";
import {console} from "forge-std/console.sol";

import {IPoolManager} from "v4-core/interfaces/IPoolManager.sol";
import {UniroidHook} from "../../src/UniroidHook.sol";

/**
 * @title DeployUniroidHookHolesky
 * @notice Script to deploy the UniroidHook contract to Holesky testnet
 * @dev Uses a pre-mined salt from the MineHookAddress script
 * 
 * @dev Usage Instructions:
 * 1. First deploy the Pool Manager to Holesky using DeployPoolManagerHolesky.s.sol
 * 2. Update MineHookAddress.s.sol with the Holesky Pool Manager address
 * 3. Run MineHookAddress.s.sol to generate a salt for your hook
 * 4. Update the salt value in this script
 * 5. Run this script with:
 *    forge script script/DeployUniroidHookHolesky.s.sol --rpc-url <HOLESKY_RPC_URL> --broadcast --verify -vvv
 */
contract DeployUniroidHookHolesky is Script {
    // CREATE2 factory address - standard across all EVM chains
    address constant CREATE2_DEPLOYER = 0x4e59b44847b379578588920cA78FbF26c0B4956C;

    function run() external {
        // Get private key from environment variable
        uint256 privateKey = vm.envUint("PRIVATE_KEY");
        address deployer = vm.addr(privateKey);
        
        // Log deployment information
        console.log("Deploying UniroidHook contract to Holesky");
        console.log("Deployer address:", deployer);
        
        // Get the pool manager address from environment variable or use the constant
        address poolManagerAddress;
        try vm.envAddress("POOL_MANAGER_ADDRESS_HOLESKY") returns (address addr) {
            poolManagerAddress = addr;
        } catch {
            // Use the deployed Pool Manager address from DeployPoolManagerHolesky.s.sol
            poolManagerAddress = 0x4fdC9175Bc952e8bDCe2e8cA38d00EAa9dB9a299;
            console.log("Using hardcoded Holesky Pool Manager address:", poolManagerAddress);
        }
        console.log("Using Holesky Pool Manager address:", poolManagerAddress);
        
        // Use the salt value generated by MineHookAddress.s.sol
        // This salt was specifically mined for the Holesky Pool Manager
        bytes32 salt = 0x0000000000000000000000000000000000000000000000000000000000000fd2;
        console.log("Using mined salt value:", vm.toString(salt));
        
        // Start the broadcast to record and send transactions
        vm.startBroadcast(privateKey);
        
        // Deploy the hook using CREATE2 with the mined salt
        UniroidHook hook = new UniroidHook{salt: salt}(
            IPoolManager(poolManagerAddress),
            "Uniroid Token",
            "UNIROID",
            deployer
        );
        
        // Log the deployed address
        address deployedAddress = address(hook);
        console.log("Deployed hook address:", deployedAddress);
        
        // End the broadcast
        vm.stopBroadcast();
        
        console.log("UniroidHook deployed successfully to Holesky!");
        console.log("");
        console.log("=== Next Steps ===");
        console.log("1. Verify the contract on Etherscan");
        console.log("2. Initialize pools using the hook");
        console.log("3. Add liquidity to the pools");
    }
}
